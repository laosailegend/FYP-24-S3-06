#!/usr/bin/env node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const yargs_1 = __importDefault(require("yargs"));
const fs_1 = require("fs");
const fs_2 = __importDefault(require("fs"));
const esbuild_1 = require("esbuild");
const helpers_1 = require("yargs/helpers");
const lambda_build_core_1 = require("./lambda-build-core");
const lambda_build_cli_1 = require("./lambda-build-cli");
const lambdaBuildCore = new lambda_build_core_1.LambdaBuildCore({ build: esbuild_1.build }, fs_2.default);
const cli = new lambda_build_cli_1.LambdaBuildCli(fs_1.promises, console, lambdaBuildCore);
const main = () => __awaiter(void 0, void 0, void 0, function* () {
    yield (0, yargs_1.default)((0, helpers_1.hideBin)(process.argv))
        .command(['archive', '$0'], 'Bundle and archive your lambda function code', () => {
    }, (argv) => __awaiter(void 0, void 0, void 0, function* () {
        yield cli.commandArchive({
            entry: argv.entry,
            external: argv.external,
            metafile: argv.metafile,
        });
    }))
        .command('upload <lambdas...>', 'Bundle, archive and upload to the given lambda functions', (yargs) => {
        return yargs
            .positional('lambdas', { describe: 'a list of lambdas to upload the bundle to' })
            .option('region', { alias: 'r', type: 'string', default: lambda_build_core_1.argsDefatuls.region, description: 'set the region of the lambda functions' })
            .example([
            ['$0 upload my-func1 my-func2', 'bundle, archive and upload to my-func1 and my-func2'],
            ['$0 upload my-func1 -r us-east-2', 'upload the archived bundle to my-func1 in the region us-east-2'],
        ]);
    }, (argv) => __awaiter(void 0, void 0, void 0, function* () {
        yield cli.commandUpload({
            entry: argv.entry,
            external: argv.external,
            metafile: argv.metafile,
            lambdas: argv.lambdas,
            region: argv.region,
        });
    }))
        .options({
        'e': { alias: 'entry', type: 'string', default: lambda_build_core_1.argsDefatuls.entry, description: 'The name of the entry file containing the lambda handler(s)' },
        'x': { alias: 'external', type: 'array', default: lambda_build_core_1.argsDefatuls.external, description: 'Exclude these libraries from bundling, for example libraries that you already load in a layer' },
        'm': { alias: 'metafile', type: 'boolean', default: lambda_build_core_1.argsDefatuls.metafile, description: 'Generate a meta.json file that can be used to analyze the bundle' },
    })
        .example([
        ['$0', 'bundle index.js into archive.zip'],
        ['$0 archive -e src/index.ts', 'bundle src/index.ts into archive.zip'],
        ['$0 archive -x lodash dayjs', 'bundle and archive index.js but exclude lodash and dayjs from the bundle'],
        ['$0 archive -m', 'generate a meta.json file to analyze the bundle'],
        ['$0 upload --help', 'learn more about the \'upload\' command'],
    ])
        .wrap(yargs_1.default.terminalWidth())
        .parse();
});
main();
