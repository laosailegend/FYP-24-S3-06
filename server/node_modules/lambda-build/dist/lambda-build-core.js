"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LambdaBuildCore = exports.argsDefatuls = void 0;
const jszip_1 = __importDefault(require("jszip"));
const filesize_1 = __importDefault(require("filesize"));
const client_lambda_1 = require("@aws-sdk/client-lambda");
const INDEX_JS = './index.js';
const INDEX_TS = './index.ts';
const BUNDLE_NAME_IN_ARCHIVE = 'index.js';
exports.argsDefatuls = {
    entry: './index.js|ts',
    external: [],
    metafile: false,
    region: 'us-east-1',
    lambdas: [],
};
class LambdaBuildCore {
    constructor(builder, fsys) {
        this.builder = builder;
        this.fsys = fsys;
        this.bundleAndArchive = (entry, external, isMetafile) => __awaiter(this, void 0, void 0, function* () {
            const res = yield this.createBundle(entry, external, isMetafile);
            const archive = yield this.createArchive(res.bundle);
            const archiveSize = this.getBundleSize(archive);
            return {
                archive,
                archiveSize,
                bundle: res.bundle,
                meta: res.meta,
            };
        });
        this.publishLambda = (region, functionName, archive) => __awaiter(this, void 0, void 0, function* () {
            const client = new client_lambda_1.LambdaClient({ region });
            const command = new client_lambda_1.UpdateFunctionCodeCommand({ FunctionName: functionName, ZipFile: archive });
            const res = yield client.send(command);
            return res.FunctionArn;
        });
        this.determineEntry = (fileName) => {
            const notFoundErrorMsg = `Could not find ${exports.argsDefatuls.entry} - please specify an entry point using the -e flag`;
            if (fileName === exports.argsDefatuls.entry) {
                if (this.fsys.existsSync(INDEX_JS)) {
                    return INDEX_JS;
                }
                if (this.fsys.existsSync(INDEX_TS)) {
                    return INDEX_TS;
                }
                throw Error(notFoundErrorMsg);
            }
            else {
                if (!this.fsys.existsSync(fileName)) {
                    throw Error(notFoundErrorMsg);
                }
                return fileName;
            }
        };
        this.createBundle = (fileName, external, metafile) => __awaiter(this, void 0, void 0, function* () {
            const entry = this.determineEntry(fileName);
            const res = yield this.builder.build({
                logLevel: 'silent',
                entryPoints: [entry],
                bundle: true,
                write: false,
                minify: false,
                target: 'node12',
                platform: 'node',
                absWorkingDir: process.cwd(),
                external,
                metafile,
            });
            const bundlingResult = {
                bundle: res.outputFiles[0].text,
            };
            if (metafile && res.metafile) {
                bundlingResult.meta = JSON.stringify(res.metafile);
            }
            const { errors, warnings } = res;
            if (errors.length || warnings.length) {
            }
            return bundlingResult;
        });
        this.getBundleSize = (buf) => {
            return (0, filesize_1.default)(buf.toString().length);
        };
        this.createArchive = (bundle) => __awaiter(this, void 0, void 0, function* () {
            const zip = new jszip_1.default();
            zip.file(BUNDLE_NAME_IN_ARCHIVE, bundle);
            const buf = yield zip.generateAsync({ type: 'nodebuffer' });
            return buf;
        });
    }
}
exports.LambdaBuildCore = LambdaBuildCore;
