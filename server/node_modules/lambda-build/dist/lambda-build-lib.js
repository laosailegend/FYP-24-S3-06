"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LambdaBuildLib = void 0;
const lambda_build_core_1 = require("./lambda-build-core");
class LambdaBuildLib {
    constructor(lambdaBuildCore) {
        this.lambdaBuildCore = lambdaBuildCore;
        this.build = (args) => __awaiter(this, void 0, void 0, function* () {
            var _a, _b, _c;
            const entry = (_a = args === null || args === void 0 ? void 0 : args.entry) !== null && _a !== void 0 ? _a : lambda_build_core_1.argsDefatuls.entry;
            const external = (_b = args === null || args === void 0 ? void 0 : args.external) !== null && _b !== void 0 ? _b : lambda_build_core_1.argsDefatuls.external;
            const metafile = (_c = args === null || args === void 0 ? void 0 : args.metafile) !== null && _c !== void 0 ? _c : lambda_build_core_1.argsDefatuls.metafile;
            const res = yield this.lambdaBuildCore.bundleAndArchive(entry, external, metafile);
            return res;
        });
        this.buildAndUpload = (args) => __awaiter(this, void 0, void 0, function* () {
            var _d, _e, _f, _g, _h;
            const entry = (_d = args.entry) !== null && _d !== void 0 ? _d : lambda_build_core_1.argsDefatuls.entry;
            const external = (_e = args.external) !== null && _e !== void 0 ? _e : lambda_build_core_1.argsDefatuls.external;
            const metafile = (_f = args.metafile) !== null && _f !== void 0 ? _f : lambda_build_core_1.argsDefatuls.metafile;
            const region = (_g = args.region) !== null && _g !== void 0 ? _g : lambda_build_core_1.argsDefatuls.region;
            const lambdas = (_h = args.lambdas) !== null && _h !== void 0 ? _h : lambda_build_core_1.argsDefatuls.lambdas;
            if (!lambdas.length) {
                throw Error('Must specify lambdas to upload the archive to');
            }
            const buildRes = yield this.build({ entry, external, metafile });
            let updatedArns = [];
            if (buildRes.archive && region) {
                const all = [];
                for (const lambda of lambdas) {
                    all.push(this.lambdaBuildCore.publishLambda(region, lambda, buildRes.archive));
                }
                const arns = yield Promise.all(all);
                updatedArns = arns.filter(arn => Boolean(arn));
            }
            return {
                archive: buildRes.archive,
                archiveSize: buildRes.archiveSize,
                meta: buildRes.meta,
                updatedArns,
            };
        });
    }
}
exports.LambdaBuildLib = LambdaBuildLib;
